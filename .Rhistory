df <- na.omit(df,cols="Home_Postal_Code")
#remove lines in the data frame with less than 5 characters
df <- df[nchar(df$Home_Postal_Code)>4,]
#group by zip code and count the number of occurrences of that zip code in the data
sum_zip <- df %>% group_by(Home_Postal_Code) %>% dplyr::summarise(count=n())
colnames(sum_zip)[1] <- "zip"
df_zip <- merge(zip_codes,sum_zip, all.x = TRUE)
#make all NAs=0
df_zip$count[is.na(df_zip$count)] <- 0
memb <- df_zip[,c("fips", "count")]
#change column names for the graphing as required by the choloropleth package
colnames(memb) <- c("region", "value")
#group by FIPS code
memb_grp <- memb %>% group_by(region) %>% dplyr::summarise(value_sum=sum(value))
colnames(memb_grp)[2] <- "value"
#eliminate NA columns  I found this by running the map initially and then creating separate columns
# for these items
NA_add_col1 <- c(51580,51678,51595)
NA_add_col2 <- c(0,0,0)
NA_add <- cbind(NA_add_col1,NA_add_col2)
colnames(NA_add) <- c("region", "value")
memb_grp_add <- rbind(memb_grp,NA_add)
#eliminate the items that are in the zip code file but not in the county.regions file
memb_grp_add <- memb_grp_add %>% semi_join(county.regions, by = "region")
#regroup the categories for mapping purposes
memb_cat <- memb_grp_add
for (i in 1:nrow(memb_cat)){
if (memb_cat$value[i] > 400){
memb_cat$cat[i] <- "401+"
} else if (memb_cat$value[i] > 199){
memb_cat$cat[i] <- "200-400"
} else if (memb_cat$value[i] > 99){
memb_cat$cat[i] <- "100-199"
} else if (memb_cat$value[i] > 50){
memb_cat$cat[i] <- "51-99"
} else if (memb_cat$value[i] > 10){
memb_cat$cat[i] <- "11-50"
} else if (memb_cat$value[i] > 0){
memb_cat$cat[i] <- "1-10"
}
else {
memb_cat$cat[i] <- "0"
}
}
memb_cat_final <- memb_cat[,c("region","cat")]
colnames(memb_cat_final)[2] <- "value"
memb_cat_final$value <- factor(memb_cat_final$value, levels = c("0", "1-10", "11-50", "51-99", "100-199", "200-400", "401+"))
# Includes instructors, instructor trainers, instructor trainer candidates and Designated Instructors
p <- county_choropleth(memb_cat_final, title = "AWHONN Membership by County as of March 9, 2017",
legend = "Legend", num_colors = 7,
state_zoom = NULL, county_zoom = NULL, reference_map = FALSE)  +
scale_fill_brewer(name="AWHONN Membership \nCategory", palette="Blues") +
labs(subtitle = paste("n=",count=nrow(df)))+
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5))
ggplotly(p)
library(plotly)
library(stringr)
library(devtools)
library(maps)
library(mapdata)
library(ggmap)
library(noncensus)
library(choroplethrMaps)
library(choroplethr)
library(data.table)
library(dplyr)
data("county.regions")
data("zip_codes")
setwd('L:/Maps/membership')
df <- read.csv("membership_03092017_raw.csv", header = TRUE)
df <- df[ ,c("Web_Site_Member_ID", "Home_Postal_Code", "Home_Country")]
#obtain only the first five characters in the zip code
df$Home_Postal_Code <- substring(df$Home_Postal_Code,1,5)
#remove null values in the Zip Code
df[("Home_Postal_Code"==""),] <-NA
df <- na.omit(df,cols="Home_Postal_Code")
#remove lines in the data frame with less than 5 characters
df <- df[nchar(df$Home_Postal_Code)>4,]
#group by zip code and count the number of occurrences of that zip code in the data
sum_zip <- df %>% group_by(Home_Postal_Code) %>% dplyr::summarise(count=n())
colnames(sum_zip)[1] <- "zip"
df_zip <- merge(zip_codes,sum_zip, all.x = TRUE)
#make all NAs=0
df_zip$count[is.na(df_zip$count)] <- 0
memb <- df_zip[,c("fips", "count")]
#change column names for the graphing as required by the choloropleth package
colnames(memb) <- c("region", "value")
#group by FIPS code
memb_grp <- memb %>% group_by(region) %>% dplyr::summarise(value_sum=sum(value))
colnames(memb_grp)[2] <- "value"
#eliminate NA columns  I found this by running the map initially and then creating separate columns
# for these items
NA_add_col1 <- c(51580,51678,51595)
NA_add_col2 <- c(0,0,0)
NA_add <- cbind(NA_add_col1,NA_add_col2)
colnames(NA_add) <- c("region", "value")
memb_grp_add <- rbind(memb_grp,NA_add)
#eliminate the items that are in the zip code file but not in the county.regions file
memb_grp_add <- memb_grp_add %>% semi_join(county.regions, by = "region")
#regroup the categories for mapping purposes
memb_cat <- memb_grp_add
for (i in 1:nrow(memb_cat)){
if (memb_cat$value[i] > 400){
memb_cat$cat[i] <- "401+"
} else if (memb_cat$value[i] > 199){
memb_cat$cat[i] <- "200-400"
} else if (memb_cat$value[i] > 99){
memb_cat$cat[i] <- "100-199"
} else if (memb_cat$value[i] > 50){
memb_cat$cat[i] <- "51-99"
} else if (memb_cat$value[i] > 10){
memb_cat$cat[i] <- "11-50"
} else if (memb_cat$value[i] > 0){
memb_cat$cat[i] <- "1-10"
}
else {
memb_cat$cat[i] <- "0"
}
}
memb_cat_final <- memb_cat[,c("region","cat")]
colnames(memb_cat_final)[2] <- "value"
memb_cat_final$value <- factor(memb_cat_final$value, levels = c("0", "1-10", "11-50", "51-99", "100-199", "200-400", "401+"))
# Includes instructors, instructor trainers, instructor trainer candidates and Designated Instructors
p <- county_choropleth(memb_cat_final, title = "AWHONN Membership by County as of March 9, 2017",
legend = "Legend", num_colors = 7,
state_zoom = NULL, county_zoom = NULL, reference_map = FALSE)  +
scale_fill_brewer(name="AWHONN Membership \nCategory", palette="Blues") +
labs(subtitle = paste("n=",count=nrow(df)))+
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5))
ggplotly(p)
library(plotly)
library(stringr)
library(devtools)
library(maps)
library(mapdata)
library(ggmap)
library(noncensus)
library(choroplethrMaps)
library(choroplethr)
library(data.table)
library(dplyr)
data("county.regions")
data("zip_codes")
setwd('L:/Maps/membership')
df <- read.csv("membership_03092017_raw.csv", header = TRUE)
df <- df[ ,c("Web_Site_Member_ID", "Home_Postal_Code", "Home_Country")]
#obtain only the first five characters in the zip code
df$Home_Postal_Code <- substring(df$Home_Postal_Code,1,5)
#remove null values in the Zip Code
df[("Home_Postal_Code"==""),] <-NA
df <- na.omit(df,cols="Home_Postal_Code")
#remove lines in the data frame with less than 5 characters
df <- df[nchar(df$Home_Postal_Code)>4,]
#group by zip code and count the number of occurrences of that zip code in the data
sum_zip <- df %>% group_by(Home_Postal_Code) %>% dplyr::summarise(count=n())
colnames(sum_zip)[1] <- "zip"
df_zip <- merge(zip_codes,sum_zip, all.x = TRUE)
#make all NAs=0
df_zip$count[is.na(df_zip$count)] <- 0
memb <- df_zip[,c("fips", "count")]
#change column names for the graphing as required by the choloropleth package
colnames(memb) <- c("region", "value")
#group by FIPS code
memb_grp <- memb %>% group_by(region) %>% dplyr::summarise(value_sum=sum(value))
colnames(memb_grp)[2] <- "value"
#eliminate NA columns  I found this by running the map initially and then creating separate columns
# for these items
NA_add_col1 <- c(51580,51678,51595)
NA_add_col2 <- c(0,0,0)
NA_add <- cbind(NA_add_col1,NA_add_col2)
colnames(NA_add) <- c("region", "value")
memb_grp_add <- rbind(memb_grp,NA_add)
#eliminate the items that are in the zip code file but not in the county.regions file
memb_grp_add <- memb_grp_add %>% semi_join(county.regions, by = "region")
#regroup the categories for mapping purposes
memb_cat <- memb_grp_add
for (i in 1:nrow(memb_cat)){
if (memb_cat$value[i] > 400){
memb_cat$cat[i] <- "401+"
} else if (memb_cat$value[i] > 199){
memb_cat$cat[i] <- "200-400"
} else if (memb_cat$value[i] > 99){
memb_cat$cat[i] <- "100-199"
} else if (memb_cat$value[i] > 50){
memb_cat$cat[i] <- "51-99"
} else if (memb_cat$value[i] > 10){
memb_cat$cat[i] <- "11-50"
} else if (memb_cat$value[i] > 0){
memb_cat$cat[i] <- "1-10"
}
else {
memb_cat$cat[i] <- "0"
}
}
memb_cat_final <- memb_cat[,c("region","cat")]
colnames(memb_cat_final)[2] <- "value"
memb_cat_final$value <- factor(memb_cat_final$value, levels = c("0", "1-10", "11-50", "51-99", "100-199", "200-400", "401+"))
# Includes instructors, instructor trainers, instructor trainer candidates and Designated Instructors
p <- county_choropleth(memb_cat_final, title = "AWHONN Membership by County as of March 9, 2017",
legend = "Legend", num_colors = 7,
state_zoom = NULL, county_zoom = NULL, reference_map = FALSE)  +
scale_fill_brewer(name="AWHONN Membership \nCategory", palette="Blues") +
labs(subtitle = paste("n=",count=nrow(df)))+
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5))
p
library(RODBC)
data("county.regions")
data("zip_codes")
setwd('L:/Maps/membership')
df <- odbcConnect("AWHONNYM", uid = "bscheich", pwd = "Tableau2")
ch <- odbcConnect("AWHONNYM", uid = "bscheich", pwd = "Tableau2")
df<- sqlFetch(ch, "YMMemberProfile")
dim(df)
memb <- c("FM", "LFM", "AM", "FMG", "FMGM", "IM", "RM", "SM")
df$member_status <- rep(0,dim(df)[1])
df$member_status[df$Member_Type_Code %in% memb] <-1
df <- df[df$member_status==1,]
dim(df)
df<- sqlFetch(ch, "YMMemberProfile")
dim(df)
df$member_status <- rep(0,dim(df)[1])
df$MemberTypeCode
df$member_status[df$MemberTypeCode %in% memb] <-1
df <- df[df$member_status==1,]
dim(df)
df <- df[ ,c("Web_Site_Member_ID", "Home_Postal_Code", "Home_Country")]
df <- df[ ,c("WebsiteID", "HomePostalCode", "HomeCountry")]
library(plotly)
library(stringr)
library(devtools)
library(maps)
library(mapdata)
library(ggmap)
library(noncensus)
library(choroplethrMaps)
library(choroplethr)
library(data.table)
library(dplyr)
library(RODBC)
data("county.regions")
data("zip_codes")
setwd('L:/Maps/membership')
ch <- odbcConnect("AWHONNYM", uid = "bscheich", pwd = "Tableau2")
#obtain data from database
df<- sqlFetch(ch, "YMMemberProfile")
memb <- c("FM", "LFM", "AM", "FMG", "FMGM", "IM", "RM", "SM")
df$member_status <- rep(0,dim(df)[1])
df$member_status[df$MemberTypeCode %in% memb] <-1
#df <- read.csv("membership_03092017_raw.csv", header = TRUE)
df <- df[df$member_status==1,]
df <- df[ ,c("WebsiteID", "HomePostalCode", "HomeCountry")]
#obtain only the first five characters in the zip code
df$HomePostalCode <- substring(df$HomePostalCode,1,5)
#remove null values in the Zip Code
df[("HomePostalCode"==""),] <-NA
df <- na.omit(df,cols="HomePostalCode")
#remove lines in the data frame with less than 5 characters
df <- df[nchar(df$HomePostalCode)>4,]
#group by zip code and count the number of occurrences of that zip code in the data
sum_zip <- df %>% group_by(HomePostalCode) %>% dplyr::summarise(count=n())
colnames(sum_zip)[1] <- "zip"
df_zip <- merge(zip_codes,sum_zip, all.x = TRUE)
#make all NAs=0
df_zip$count[is.na(df_zip$count)] <- 0
memb <- df_zip[,c("fips", "count")]
#change column names for the graphing as required by the choloropleth package
colnames(memb) <- c("region", "value")
#group by FIPS code
memb_grp <- memb %>% group_by(region) %>% dplyr::summarise(value_sum=sum(value))
colnames(memb_grp)[2] <- "value"
#eliminate NA columns  I found this by running the map initially and then creating separate columns
# for these items
NA_add_col1 <- c(51580,51678,51595)
NA_add_col2 <- c(0,0,0)
NA_add <- cbind(NA_add_col1,NA_add_col2)
colnames(NA_add) <- c("region", "value")
memb_grp_add <- rbind(memb_grp,NA_add)
#eliminate the items that are in the zip code file but not in the county.regions file
memb_grp_add <- memb_grp_add %>% semi_join(county.regions, by = "region")
#regroup the categories for mapping purposes
memb_cat <- memb_grp_add
for (i in 1:nrow(memb_cat)){
if (memb_cat$value[i] > 400){
memb_cat$cat[i] <- "401+"
} else if (memb_cat$value[i] > 199){
memb_cat$cat[i] <- "200-400"
} else if (memb_cat$value[i] > 99){
memb_cat$cat[i] <- "100-199"
} else if (memb_cat$value[i] > 50){
memb_cat$cat[i] <- "51-99"
} else if (memb_cat$value[i] > 10){
memb_cat$cat[i] <- "11-50"
} else if (memb_cat$value[i] > 0){
memb_cat$cat[i] <- "1-10"
}
else {
memb_cat$cat[i] <- "0"
}
}
memb_cat_final <- memb_cat[,c("region","cat")]
colnames(memb_cat_final)[2] <- "value"
memb_cat_final$value <- factor(memb_cat_final$value, levels = c("0", "1-10", "11-50", "51-99", "100-199", "200-400", "401+"))
# Includes instructors, instructor trainers, instructor trainer candidates and Designated Instructors
p <- county_choropleth(memb_cat_final, title= "AWHONN Membership by County",
legend = "Legend", num_colors = 7,
state_zoom = NULL, county_zoom = NULL, reference_map = FALSE)  +
scale_fill_brewer(name="AWHONN Membership \nCategory", palette="Blues") +
labs(subtitle = paste("n=",count=nrow(df)))+
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5))
p
```{r}
p <- county_choropleth(memb_cat_final, title= "AWHONN Membership by County",
legend = "Legend", num_colors = 7,
state_zoom = NULL, county_zoom = NULL, reference_map = FALSE)  +
scale_fill_brewer(name="AWHONN Membership \nCategory", palette="Blues") +
theme(plot.title = element_text(hjust = 0.5)) +theme(legend.position="bottom")
p
?d3heatmap
??d3heatmap
install.packages("d3heatmap")
?d3heatmap
??d3heatmap
install.packages("installr")
installr::updateR()
?diff
?diff
x<-c(1,5,2,7,9, 4)
x
diff(x, lag=2)
difference <-diff(x, lag=2)
setwd("/Users/benjaminscheich/my_website")
if (!requireNamespace("devtools")) install.packages("devtools")
devtools::install_github("rstudio/blogdown")
blogdown::build_site()
setwd("/Users/benjaminscheich/my_website")
library(ggplot2)
library(reshape2)
library(dplyr)
library(readxl)
#library(RCurl)
library(XML)
#set working directory
setwd("C:/Users/bscheich/Documents")
#read in the data
data <- read.csv("6 month new member survey.csv", header=TRUE)
#rename columns to make the data easier to analyze
colnames(data)[colnames(data) == 'Question.ID'] <- 'Quest_ID'
colnames(data)[colnames(data) == "Respondent.s.Answer"] <- 'Resp_ans'
colnames(data)[colnames(data) == "Respondent.ID"] <- 'Resp_ID'
colnames(data)[colnames(data) == "Answer.ID"] <- 'Ans_ID'
head(data)
#create data lookup table for questions
quest <- data %>% distinct(Quest_ID,Question)
#remove the question column for formatting purposes
remove <- !names(data)  %in% c("Question")
#removing the question column
data <- data[,remove]
head(data)
#removes the hypertext tags from the questions for better formatting
cleanFun <- function(htmlString) {
return(gsub("<.*?>", "", htmlString))
}
#overwrite text questions
quest[,2]<- apply(quest[,2, drop=F], 2, cleanFun)
quest$Question <- as.factor(quest$Question)
#merge the questions and the question ids with the original data
df_merged <- merge(x = data, y = quest, by = 'Quest_ID', all= TRUE)
df_merged <- df_merged[,c("Date.Submitted", "Question.Format", "Quest_ID",  "Question", "Resp_ID", "Ans_ID", "Resp_ans")]
head(df_merged)
#create a space for merged id fields
df_merged$id <- df_merged$Quest_ID
#create a new question identifier for all multi select check boxes
mult <- df_merged$Question.Format=='Multi-Select (i.e. checkboxes)'
#subset all questions with Multi-Select
subset <- df_merged[mult,]
df_merged[mult, "id"] <- paste(subset$Quest_ID,subset$Ans_ID, sep=".")
col_head <- df_merged %>% distinct(id,Question)
df_long <- dcast(df_merged, Resp_ID~id, value.var="Resp_ans")
#create column headings for the updated spreadsheet
col_head <- df_merged %>% distinct(id,Question)
col_head <- paste(col_head$id,col_head$Question, sep="-")
col_head <- c("Resp_ID", col_head)
colnames(df_long) <- col_head
par(mar = c(0, 1, 0, 1))
pie(
c(280, 60, 20),
c('Sky', 'Sunny side of pyramid', 'Shady side of pyramid'),
col = c('#0292D8', '#F7EA39', '#C4B632'),
init.angle = -50, border = NA
)
setwd("C:/Users/bscheich/Documents/my_website")
if (!requireNamespace("devtools")) install.packages("devtools")
devtools::install_github("rstudio/blogdown")
blogdown::build_site()
blogdown::serve_site()
library(ggplot2)
library(reshape2)
library(dplyr)
library(readxl)
library(XML)
setwd("L:/MSO/data/")
data <- read.csv("6 month new member survey.csv", header=TRUE)
data
colnames(data)[colnames(data) == 'Question.ID'] <- 'Quest_ID'
colnames(data)[colnames(data) == "Respondent.s.Answer"] <- 'Resp_ans'
colnames(data)[colnames(data) == "Respondent.ID"] <- 'Resp_ID'
colnames(data)[colnames(data) == "Answer.ID"] <- 'Ans_ID'
quest <- data %>% distinct(Quest_ID,Question)
remove <- !names(data)  %in% c("Question")
data <- data[,remove]
cleanFun <- function(htmlString) {
return(gsub("<.*?>", "", htmlString))
}
quest[,2]<- apply(quest[,2, drop=F], 2, cleanFun)
quest$Question <- as.factor(quest$Question)
df_merged <- merge(x = data, y = quest, by = 'Quest_ID', all= TRUE)
df_merged <- df_merged[,c("Date.Submitted", "Question.Format", "Quest_ID",  "Question", "Resp_ID", "Ans_ID", "Resp_ans")]
df_merged$id <- df_merged$Quest_ID
mult <- df_merged$Question.Format=='Multi-Select (i.e. checkboxes)'
subset <- df_merged[mult,]
df_merged[mult, "id"] <- paste(subset$Quest_ID,subset$Ans_ID, sep=".")
col_head <- df_merged %>% distinct(id,Question)
df_long <- dcast(df_merged, Resp_ID~id, value.var="Resp_ans")
col_head <- df_merged %>% distinct(id,Question)
col_head <- paste(col_head$id,col_head$Question, sep="-")
col_head <- c("Resp_ID", col_head)
colnames(df_long) <- col_head
df_long
pl <- ggplot(df_long,aes(factor(`914786-1. Overall, how satisfied are you being a member of AWHONN? (1=not at all, 5=completely satisfied)?`)))+geom_bar()+
xlab("Satisfaction Level") + labs(title="Overall, how satisfied are you being a member of AWHONN?", subtitle="n=?") +
ylim(c(0,20)) + theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust=0.5))
pl
col_head$id
col_head
df_long$914786-1. Overall, how satisfied are you being a member of AWHONN? (1=not at all, 5=completely satisfied)?
df_long$`914786-1. Overall, how satisfied are you being a member of AWHONN? (1=not at all, 5=completely satisfied)?`
head(df_long)
df_long$`914786-1. Overall, how satisfied are you being a member of AWHONN? (1=not at all, 5=completely satisfied)`
pl <- ggplot(df_long,aes((`914786-1. Overall, how satisfied are you being a member of AWHONN? (1=not at all, 5=completely satisfied)`)))+geom_bar()+
xlab("Satisfaction Level") + labs(title="Overall, how satisfied are you being a member of AWHONN?", subtitle="n=?") +
ylim(c(0,20)) + theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust=0.5))
pl
library(ggplot2)
library(reshape2)
library(dplyr)
library(readxl)
#library(RCurl)
library(XML)
#set working directory
setwd("C:/Users/bscheich/Documents")
#read in the data
data <- read.csv("6 month new member survey.csv", header=TRUE)
#rename columns to make the data easier to analyze
colnames(data)[colnames(data) == 'Question.ID'] <- 'Quest_ID'
colnames(data)[colnames(data) == "Respondent.s.Answer"] <- 'Resp_ans'
colnames(data)[colnames(data) == "Respondent.ID"] <- 'Resp_ID'
colnames(data)[colnames(data) == "Answer.ID"] <- 'Ans_ID'
head(data)
#create data lookup table for questions
quest <- data %>% distinct(Quest_ID,Question)
#remove the question column for formatting purposes
remove <- !names(data)  %in% c("Question")
#removing the question column
data <- data[,remove]
head(data)
#removes the hypertext tags from the questions for better formatting
cleanFun <- function(htmlString) {
return(gsub("<.*?>", "", htmlString))
}
#overwrite text questions
quest[,2]<- apply(quest[,2, drop=F], 2, cleanFun)
quest$Question <- as.factor(quest$Question)
#merge the questions and the question ids with the original data
df_merged <- merge(x = data, y = quest, by = 'Quest_ID', all= TRUE)
df_merged <- df_merged[,c("Date.Submitted", "Question.Format", "Quest_ID",  "Question", "Resp_ID", "Ans_ID", "Resp_ans")]
head(df_merged)
#create a space for merged id fields
df_merged$id <- df_merged$Quest_ID
#create a new question identifier for all multi select check boxes
mult <- df_merged$Question.Format=='Multi-Select (i.e. checkboxes)'
#subset all questions with Multi-Select
subset <- df_merged[mult,]
df_merged[mult, "id"] <- paste(subset$Quest_ID,subset$Ans_ID, sep=".")
col_head <- df_merged %>% distinct(id,Question)
df_long <- dcast(df_merged, Resp_ID~id, value.var="Resp_ans")
#create column headings for the updated spreadsheet
col_head <- df_merged %>% distinct(id,Question)
col_head <- paste(col_head$id,col_head$Question, sep="-")
col_head <- c("Resp_ID", col_head)
colnames(df_long) <- col_head
#graph 914786-1. Overall, how satisfied are you being a member of AWHONN? (1=not at all, 5=completely satisfied)
pl <- ggplot(df_long,aes((`914786-1. Overall, how satisfied are you being a member of AWHONN? (1=not at all, 5=completely satisfied)`)))+geom_bar()+
xlab("Satisfaction Level") + labs(title="Overall, how satisfied are you being a member of AWHONN?", subtitle="n=1") +
ylim(c(0,20)) + theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust=0.5))
blogdown::build_site()
setwd("C:/Users/bscheich/Documents/my_website")
if (!requireNamespace("devtools")) install.packages("devtools")
devtools::install_github("rstudio/blogdown")
blogdown::build_site()
blogdown::serve_site()
#graph 914786-1. Overall, how satisfied are you being a member of AWHONN? (1=not at all, 5=completely satisfied)
pl <- ggplot(df_long,aes((`914786-1. Overall, how satisfied are you being a member of AWHONN? (1=not at all, 5=completely satisfied)`)))+geom_bar()+
xlab("Satisfaction Level") + labs(title="Overall, how satisfied are you being a member of AWHONN?", subtitle="n=1") +
ylim(c(0,20)) + theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust=0.5))
pl
setwd("C:/Users/bscheich/Documents/my_website")
if (!requireNamespace("devtools")) install.packages("devtools")
devtools::install_github("rstudio/blogdown")
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
